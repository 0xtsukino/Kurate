/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  GlobalAnonymousFeed,
  GlobalAnonymousFeedInterface,
} from "../../contracts/GlobalAnonymousFeed";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "semaphoreAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "GroupAlreadyExists",
    type: "error",
  },
  {
    inputs: [],
    name: "GroupNotCreated",
    type: "error",
  },
  {
    inputs: [],
    name: "IdentityAlreadyExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "groupId",
        type: "uint256",
      },
    ],
    name: "createGroup",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "groupMembers",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "groups",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "groupId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "identityCommitment",
        type: "uint256",
      },
    ],
    name: "joinGroup",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "semaphore",
    outputs: [
      {
        internalType: "contract ISemaphore",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516107133803806107138339818101604052810190610032919061008d565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506100ff565b600081519050610087816100e8565b92915050565b60006020828403121561009f57600080fd5b60006100ad84828501610078565b91505092915050565b60006100c1826100c8565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6100f1816100b6565b81146100fc57600080fd5b50565b6106058061010e6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631a0c750c1461005c57806365bf60e0146100785780637b5d25341461009457806396324bd4146100b2578063c6f6a749146100e2575b600080fd5b6100766004803603810190610071919061041d565b610112565b005b610092600480360381019061008d91906103f4565b6102ae565b005b61009c61036c565b6040516100a991906104bf565b60405180910390f35b6100cc60048036038101906100c791906103f4565b610390565b6040516100d991906104a4565b60405180910390f35b6100fc60048036038101906100f7919061041d565b6103b0565b60405161010991906104a4565b60405180910390f35b600115156001600084815260200190815260200160002060009054906101000a900460ff16151514610170576040517fde89197f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001151560026000848152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16151514156101e0576040517f6b41035600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631783efc383836040518363ffffffff1660e01b815260040161023b929190610511565b600060405180830381600087803b15801561025557600080fd5b505af1158015610269573d6000803e3d6000fd5b50505050600160026000848152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639c11214182600f306040518463ffffffff1660e01b815260040161030c939291906104da565b600060405180830381600087803b15801561032657600080fd5b505af115801561033a573d6000803e3d6000fd5b50505050600180600083815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915054906101000a900460ff1681565b60026020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b6000813590506103ee816105b8565b92915050565b60006020828403121561040657600080fd5b6000610414848285016103df565b91505092915050565b6000806040838503121561043057600080fd5b600061043e858286016103df565b925050602061044f858286016103df565b9150509250929050565b6104628161053a565b82525050565b6104718161054c565b82525050565b61048081610582565b82525050565b61048f816105a6565b82525050565b61049e81610578565b82525050565b60006020820190506104b96000830184610468565b92915050565b60006020820190506104d46000830184610477565b92915050565b60006060820190506104ef6000830186610495565b6104fc6020830185610486565b6105096040830184610459565b949350505050565b60006040820190506105266000830185610495565b6105336020830184610495565b9392505050565b600061054582610558565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061058d82610594565b9050919050565b600061059f82610558565b9050919050565b60006105b182610578565b9050919050565b6105c181610578565b81146105cc57600080fd5b5056fea2646970667358221220d6a723fcf9f6d54ed40d7edb376dff7fdc3af368712a01f43d2c56894b696c8764736f6c63430008040033";

type GlobalAnonymousFeedConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GlobalAnonymousFeedConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GlobalAnonymousFeed__factory extends ContractFactory {
  constructor(...args: GlobalAnonymousFeedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    semaphoreAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GlobalAnonymousFeed> {
    return super.deploy(
      semaphoreAddress,
      overrides || {}
    ) as Promise<GlobalAnonymousFeed>;
  }
  override getDeployTransaction(
    semaphoreAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(semaphoreAddress, overrides || {});
  }
  override attach(address: string): GlobalAnonymousFeed {
    return super.attach(address) as GlobalAnonymousFeed;
  }
  override connect(signer: Signer): GlobalAnonymousFeed__factory {
    return super.connect(signer) as GlobalAnonymousFeed__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GlobalAnonymousFeedInterface {
    return new utils.Interface(_abi) as GlobalAnonymousFeedInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GlobalAnonymousFeed {
    return new Contract(address, _abi, signerOrProvider) as GlobalAnonymousFeed;
  }
}
