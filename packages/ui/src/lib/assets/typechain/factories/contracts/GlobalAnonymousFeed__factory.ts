/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  GlobalAnonymousFeed,
  GlobalAnonymousFeedInterface,
} from "../../contracts/GlobalAnonymousFeed";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "semaphoreAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "GroupAlreadyExists",
    type: "error",
  },
  {
    inputs: [],
    name: "GroupNotCreated",
    type: "error",
  },
  {
    inputs: [],
    name: "IdentityAlreadyExists",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "groupId",
        type: "uint256",
      },
    ],
    name: "NewGroup",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "groupId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "identityCommitment",
        type: "uint256",
      },
    ],
    name: "NewIdentity",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "groupId",
        type: "uint256",
      },
    ],
    name: "createGroup",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "groupMembers",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "groups",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "groupId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "identityCommitment",
        type: "uint256",
      },
    ],
    name: "joinGroup",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "semaphore",
    outputs: [
      {
        internalType: "contract ISemaphore",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161079e38038061079e8339818101604052810190610032919061008d565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506100ff565b600081519050610087816100e8565b92915050565b60006020828403121561009f57600080fd5b60006100ad84828501610078565b91505092915050565b60006100c1826100c8565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6100f1816100b6565b81146100fc57600080fd5b50565b6106908061010e6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631a0c750c1461005c57806365bf60e0146100785780637b5d25341461009457806396324bd4146100b2578063c6f6a749146100e2575b600080fd5b6100766004803603810190610071919061048d565b610112565b005b610092600480360381019061008d9190610464565b6102e7565b005b61009c6103dc565b6040516100a9919061052f565b60405180910390f35b6100cc60048036038101906100c79190610464565b610400565b6040516100d99190610514565b60405180910390f35b6100fc60048036038101906100f7919061048d565b610420565b6040516101099190610514565b60405180910390f35b600115156001600084815260200190815260200160002060009054906101000a900460ff16151514610170576040517fde89197f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001151560026000848152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16151514156101e0576040517f6b41035600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631783efc383836040518363ffffffff1660e01b815260040161023b92919061059c565b600060405180830381600087803b15801561025557600080fd5b505af1158015610269573d6000803e3d6000fd5b50505050600160026000848152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507f9022b21ab9c606c8b7762c72f1613d50200eec8917cbeed3d0e0484c983cd87682826040516102db92919061059c565b60405180910390a15050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639c112141826014306040518463ffffffff1660e01b815260040161034593929190610565565b600060405180830381600087803b15801561035f57600080fd5b505af1158015610373573d6000803e3d6000fd5b50505050600180600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507f914422ff967590d7a717ee85a39e76d52e3d31b944b0749d0b27161703e4379d816040516103d1919061054a565b60405180910390a150565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915054906101000a900460ff1681565b60026020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60008135905061045e81610643565b92915050565b60006020828403121561047657600080fd5b60006104848482850161044f565b91505092915050565b600080604083850312156104a057600080fd5b60006104ae8582860161044f565b92505060206104bf8582860161044f565b9150509250929050565b6104d2816105c5565b82525050565b6104e1816105d7565b82525050565b6104f08161060d565b82525050565b6104ff81610631565b82525050565b61050e81610603565b82525050565b600060208201905061052960008301846104d8565b92915050565b600060208201905061054460008301846104e7565b92915050565b600060208201905061055f6000830184610505565b92915050565b600060608201905061057a6000830186610505565b61058760208301856104f6565b61059460408301846104c9565b949350505050565b60006040820190506105b16000830185610505565b6105be6020830184610505565b9392505050565b60006105d0826105e3565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006106188261061f565b9050919050565b600061062a826105e3565b9050919050565b600061063c82610603565b9050919050565b61064c81610603565b811461065757600080fd5b5056fea264697066735822122027896ecf9a1896ee1d49f89c87e5e0fa7d2b12352dbfe30a3bcc59aeb1bc700564736f6c63430008040033";

type GlobalAnonymousFeedConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GlobalAnonymousFeedConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GlobalAnonymousFeed__factory extends ContractFactory {
  constructor(...args: GlobalAnonymousFeedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    semaphoreAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GlobalAnonymousFeed> {
    return super.deploy(
      semaphoreAddress,
      overrides || {}
    ) as Promise<GlobalAnonymousFeed>;
  }
  override getDeployTransaction(
    semaphoreAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(semaphoreAddress, overrides || {});
  }
  override attach(address: string): GlobalAnonymousFeed {
    return super.attach(address) as GlobalAnonymousFeed;
  }
  override connect(signer: Signer): GlobalAnonymousFeed__factory {
    return super.connect(signer) as GlobalAnonymousFeed__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GlobalAnonymousFeedInterface {
    return new utils.Interface(_abi) as GlobalAnonymousFeedInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GlobalAnonymousFeed {
    return new Contract(address, _abi, signerOrProvider) as GlobalAnonymousFeed;
  }
}
